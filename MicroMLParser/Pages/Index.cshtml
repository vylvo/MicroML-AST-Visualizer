@page
@model IndexModel
@{
    ViewData["Title"] = "MicroML AST Visualizer";
}

<div class="container">
    <h1 class="main-title">MicroML AST Visualizer</h1>
    <p class="intro-text">Enter MicroML code below to see its Abstract Syntax Tree visualization.</p>

    <div class="code-input-container">
        <form method="post" id="codeForm">
            <div class="form-group">
                <label for="codeInput">MicroML Code:</label>
                <textarea id="codeInput" name="Code" class="form-control code-input" rows="10">@Model.Code</textarea>
            </div>
            <div class="sample-buttons">
                <button type="button" class="btn btn-outline-secondary" id="sampleSimple">Simple Example</button>
                <button type="button" class="btn btn-outline-secondary" id="sampleFunction">Function Example</button>
                <button type="button" class="btn btn-outline-secondary" id="sampleConditional">Conditional Example</button>
                <button type="button" class="btn btn-outline-secondary" id="sampleHigherOrder">Higher-Order Function</button>
            </div>
            <div class="form-actions">
                <button type="submit" class="btn btn-primary">Generate AST</button>
                <button type="button" class="btn btn-secondary" id="clearBtn">Clear</button>
            </div>
        </form>
    </div>

    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="error-container">
            <h2>Error</h2>
            <div class="alert alert-danger">
                <p><strong>@Model.ErrorMessage</strong></p>
                @if (Model.ErrorLine > 0)
                {
                    <p>Line: @Model.ErrorLine</p>
                    @if (!string.IsNullOrEmpty(Model.ErrorContext))
                    {
                        <pre class="error-context"><code>@Model.ErrorContext</code></pre>
                    }
                }
                <p class="error-help">Check your code for syntax errors and try again.</p>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(Model.SvgOutput))
    {
        <div class="ast-output-container">
            <h2>Abstract Syntax Tree</h2>
            <div class="ast-svg-container">
                @Html.Raw(Model.SvgOutput)
            </div>
        </div>
    }
    
    <div class="info-panel">
        <h3>MicroML Language Guide</h3>
        <p>MicroML is a simple functional programming language. Here are the key syntax elements:</p>
        <ul>
            <li><strong>Variable binding:</strong> <code>let x = 42 in ...</code></li>
            <li><strong>Functions:</strong> <code>fn x y -> x + y</code></li>
            <li><strong>Function application:</strong> <code>add 5 10</code></li>
            <li><strong>Conditionals:</strong> <code>if x > y then x else y</code></li>
            <li><strong>Arithmetic:</strong> <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code></li>
            <li><strong>Comparisons:</strong> <code>==</code>, <code>!=</code>, <code><</code>, <code>></code>, <code><=</code>, <code>>=</code></li>
        </ul>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize CodeMirror
            var codeEditor = CodeMirror.fromTextArea(document.getElementById('codeInput'), {
                mode: "microml",
                theme: "dracula",
                lineNumbers: true,
                indentUnit: 2,
                smartIndent: true,
                tabSize: 2,
                indentWithTabs: false,
                electricChars: true,
                matchBrackets: true,
                autoCloseBrackets: true,
                extraKeys: {
                    "Ctrl-Space": "autocomplete",
                    "Tab": function(cm) {
                        if (cm.somethingSelected()) {
                            cm.indentSelection("add");
                        } else {
                            cm.replaceSelection("  ", "end");
                        }
                    }
                }
            });
            
            // Set initial height
            codeEditor.setSize(null, 200);
            
            // Setup error highlighting if there's an error
            @if (Model.ErrorLine > 0)
            {
                <text>
                setTimeout(function() {
                    codeEditor.addLineClass(@(Model.ErrorLine - 1), 'background', 'error-line');
                    codeEditor.setCursor({line: @(Model.ErrorLine - 1), ch: 0});
                }, 100);
                </text>
            }
            
            // Add sample code buttons functionality
            const sampleSimple = document.getElementById('sampleSimple');
            const sampleFunction = document.getElementById('sampleFunction');
            const sampleConditional = document.getElementById('sampleConditional');
            const sampleHigherOrder = document.getElementById('sampleHigherOrder');
            const clearBtn = document.getElementById('clearBtn');
            
            sampleSimple.addEventListener('click', function() {
                codeEditor.setValue('let x = 5 in\nlet y = 10 in\nx + y * 2');
            });
            
            sampleFunction.addEventListener('click', function() {
                codeEditor.setValue('let add = fn x y -> x + y in\nadd 5 10');
            });
            
            sampleConditional.addEventListener('click', function() {
                codeEditor.setValue('let max = fn a b ->\n  if a > b then\n    a\n  else\n    b\nin\nmax 42 17');
            });
            
            sampleHigherOrder.addEventListener('click', function() {
                codeEditor.setValue('let twice = fn f x -> f (f x) in\nlet addOne = fn x -> x + 1 in\ntwice addOne 3');
            });
            
            clearBtn.addEventListener('click', function() {
                codeEditor.setValue('');
            });
            
            // Ensure form submission includes CodeMirror content
            document.getElementById('codeForm').addEventListener('submit', function() {
                codeEditor.save();
            });
        });
    </script>
}